// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(cuid())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  name               String?
  email              String?          @unique
  emailVerified      DateTime?
  image              String?
  username           String?          @unique
  plan               Plan             @default(FREE)
  isPro              Boolean          @default(false)

  accounts           Account[]
  sessions           Session[]
  sites              Site[]
  subscriptions      Subscription[]
}

model Site {
  id                 String      @id @default(cuid())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  name               String
  subdomain          String      @unique
  description        String?
  columns            Int         @default(2)

  owner              User        @relation(fields: [ownerId], references: [id])
  ownerId            String

  videos             Video[]
}

model Video {
  id                 String      @id @default(cuid())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  site               Site        @relation(fields: [siteId], references: [id])
  siteId             String

  tiktokUrl          String
  slug               String
  order              Int          @default(0)
  published          Boolean      @default(true)

  titleShort         String?      // 2-3 words
  titleLong          String?      // 6-10 words
  thumbnailUrl       String?
  authorName         String?

  transcript         Transcript?

  @@unique([siteId, slug])
}

model Transcript {
  id                 String       @id @default(cuid())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  video              Video        @relation(fields: [videoId], references: [id])
  videoId            String       @unique

  status             TranscriptStatus @default(PENDING)
  source             TranscriptSource  @default(TIKTOK)

  textRaw            String?      // raw transcript text
  textFormatted      String?      // formatted document via OpenAI and user edits
}

model Subscription {
  id                 String     @id @default(cuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  user               User       @relation(fields: [userId], references: [id])
  userId             String

  stripeCustomerId   String?    @unique
  stripeSubscriptionId String?  @unique
  plan               Plan       @default(FREE)
  status             SubscriptionStatus @default(INACTIVE)
  currentPeriodEnd   DateTime?
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Plan {
  FREE
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INACTIVE
}

enum TranscriptStatus {
  PENDING
  PROCESSING
  COMPLETE
  FAILED
}

enum TranscriptSource {
  TIKTOK
  ASSEMBLYAI
}
